{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Training the Model","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMm3lNMJ1TDqABsTRECmo1+"},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"yxr9ILOgoQlc","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":626},"executionInfo":{"status":"error","timestamp":1599232356694,"user_tz":-60,"elapsed":145269,"user":{"displayName":"MD Aneesh Quonain","photoUrl":"","userId":"15373696249087923141"}},"outputId":"c4088e9d-7f32-4570-a8fc-bc9136c924dd"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly&response_type=code\n","\n","Enter your authorization code:\n","··········\n"],"name":"stdout"},{"output_type":"error","ename":"TIMEOUT","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTIMEOUT\u001b[0m                                   Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-d5df0069828e>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdrive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdrive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36mmount\u001b[0;34m(mountpoint, force_remount, timeout_ms, use_metadata_server)\u001b[0m\n\u001b[1;32m    223\u001b[0m         \u001b[0moauth_prompt\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m         \u001b[0mproblem_and_stopped\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 225\u001b[0;31m         \u001b[0mdrive_exited\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    226\u001b[0m     ])\n\u001b[1;32m    227\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mcase\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pexpect/spawnbase.py\u001b[0m in \u001b[0;36mexpect\u001b[0;34m(self, pattern, timeout, searchwindowsize, async_, **kw)\u001b[0m\n\u001b[1;32m    342\u001b[0m         \u001b[0mcompiled_pattern_list\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompile_pattern_list\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpattern\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    343\u001b[0m         return self.expect_list(compiled_pattern_list,\n\u001b[0;32m--> 344\u001b[0;31m                 timeout, searchwindowsize, async_)\n\u001b[0m\u001b[1;32m    345\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    346\u001b[0m     def expect_list(self, pattern_list, timeout=-1, searchwindowsize=-1,\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pexpect/spawnbase.py\u001b[0m in \u001b[0;36mexpect_list\u001b[0;34m(self, pattern_list, timeout, searchwindowsize, async_, **kw)\u001b[0m\n\u001b[1;32m    370\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mexpect_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mexp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    371\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 372\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mexp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexpect_loop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    373\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    374\u001b[0m     def expect_exact(self, pattern_list, timeout=-1, searchwindowsize=-1,\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pexpect/expect.py\u001b[0m in \u001b[0;36mexpect_loop\u001b[0;34m(self, timeout)\u001b[0m\n\u001b[1;32m    179\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0meof\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    180\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mTIMEOUT\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 181\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimeout\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    182\u001b[0m         \u001b[0;32mexcept\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    183\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0merrored\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pexpect/expect.py\u001b[0m in \u001b[0;36mtimeout\u001b[0;34m(self, err)\u001b[0m\n\u001b[1;32m    142\u001b[0m             \u001b[0mexc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mTIMEOUT\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    143\u001b[0m             \u001b[0mexc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__cause__\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mNone\u001b[0m    \u001b[0;31m# in Python 3.x we can use \"raise exc from None\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 144\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mexc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    145\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    146\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0merrored\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTIMEOUT\u001b[0m: <pexpect.popen_spawn.PopenSpawn object at 0x7f154e955cc0>\nsearcher: searcher_re:\n    0: re.compile('google.colab.drive MOUNTED')\n    1: re.compile('root@406138ae2317-870bdc3c7223457cac4ecc1bec57511f: ')\n    2: re.compile('(Go to this URL in a browser: https://.*)$')\n    3: re.compile('Drive File Stream encountered a problem and has stopped')\n    4: re.compile('drive EXITED')\n<pexpect.popen_spawn.PopenSpawn object at 0x7f154e955cc0>\nsearcher: searcher_re:\n    0: re.compile('google.colab.drive MOUNTED')\n    1: re.compile('root@406138ae2317-870bdc3c7223457cac4ecc1bec57511f: ')\n    2: re.compile('(Go to this URL in a browser: https://.*)$')\n    3: re.compile('Drive File Stream encountered a problem and has stopped')\n    4: re.compile('drive EXITED')"]}]},{"cell_type":"code","metadata":{"id":"IOs-Ebdxp3Aa","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1599232356680,"user_tz":-60,"elapsed":145244,"user":{"displayName":"MD Aneesh Quonain","photoUrl":"","userId":"15373696249087923141"}}},"source":["import os\n","\n","#set directory path for dataset\n","os.chdir(\"/content/drive/My Drive/Project/Face Mask Detection\")\n","Dataset = 'dataset'\n","Data_Dir = os.listdir(Dataset)\n","print(Data_Dir)\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"58uY-4Ph_312","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1599232356683,"user_tz":-60,"elapsed":145244,"user":{"displayName":"MD Aneesh Quonain","photoUrl":"","userId":"15373696249087923141"}}},"source":["import cv2\n","import numpy as np\n","from tensorflow.keras.utils import to_categorical\n","from sklearn.preprocessing import LabelBinarizer\n","from sklearn.model_selection import train_test_split"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"3kJoQXMJAWVz","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1599232356684,"user_tz":-60,"elapsed":145242,"user":{"displayName":"MD Aneesh Quonain","photoUrl":"","userId":"15373696249087923141"}}},"source":["img_rows, img_cols = 112,112\n","\n","images =[]\n","labels = []\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0vvGThxbAnoL","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1599232356685,"user_tz":-60,"elapsed":145241,"user":{"displayName":"MD Aneesh Quonain","photoUrl":"","userId":"15373696249087923141"}}},"source":["for category in Data_Dir:\n","  folder_path = os.path.join(Dataset, category)\n","  for img in os.listdir(folder_path):\n","    img_path = os.path.join(folder_path, img)\n","    img = cv2.imread(img_path)\n","\n","    try:\n","\n","      #convert the image into gray scale\n","      grayscale_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n","\n","      #resizing the gray scaled image into size of 56x56 in order to keep size of the images consistent\n","      resized_img = cv2.resize(grayscale_img, (img_rows,img_cols))\n","      images.append(resized_img)\n","      labels.append(category)\n","\n","    #Exception Handling in case any error occurs\n","    except Exception as e:\n","      print('Exception:', e)  "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"7GZFLYq6DO_5","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1599232356685,"user_tz":-60,"elapsed":145238,"user":{"displayName":"MD Aneesh Quonain","photoUrl":"","userId":"15373696249087923141"}}},"source":["images = np.array(images)/255\n","images = np.reshape(images, (images.shape[0],img_rows,img_cols,1))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PdJzMbn1FgIM","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1599232356686,"user_tz":-60,"elapsed":145237,"user":{"displayName":"MD Aneesh Quonain","photoUrl":"","userId":"15373696249087923141"}}},"source":["#perform one hot encoding on the labels since the label are in texture form\n","lb = LabelBinarizer()\n","labels = lb.fit_transform(labels)\n","labels = to_categorical(labels)\n","labels  = np.array(labels)\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"K-xHRTZJGYo0","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1599232356687,"user_tz":-60,"elapsed":145236,"user":{"displayName":"MD Aneesh Quonain","photoUrl":"","userId":"15373696249087923141"}}},"source":["(train_X, text_X, train_y, test_y)= train_test_split(images, labels, test_size = 0.25,\n","                                                     random_state=0) "],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"vCPrTXWUHjf_","colab_type":"text"},"source":["## CNN Model"]},{"cell_type":"code","metadata":{"id":"Lrl-z6X9HX9i","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1599232356687,"user_tz":-60,"elapsed":145233,"user":{"displayName":"MD Aneesh Quonain","photoUrl":"","userId":"15373696249087923141"}}},"source":["from keras.models import Sequential\n","from keras.layers import Dense, Activation, Flatten, Dropout\n","from keras.layers import Conv2D, MaxPool2D"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0982-VFkKZqq","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1599232356688,"user_tz":-60,"elapsed":145232,"user":{"displayName":"MD Aneesh Quonain","photoUrl":"","userId":"15373696249087923141"}}},"source":["#define model parameters\n","num_classes = 2"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jtaR7Cd1KkCu","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1599232356688,"user_tz":-60,"elapsed":145230,"user":{"displayName":"MD Aneesh Quonain","photoUrl":"","userId":"15373696249087923141"}}},"source":["model = Sequential()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Vs8jDlDRKxX5","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1599232356689,"user_tz":-60,"elapsed":145229,"user":{"displayName":"MD Aneesh Quonain","photoUrl":"","userId":"15373696249087923141"}}},"source":["#first layer \n","\n","model.add(Conv2D(64,(3,3),input_shape =(img_rows,img_cols,1)))\n","model.add(Activation('relu'))\n","model.add(MaxPool2D(pool_size=(2,2)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vC0HkU8yLeOL","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1599232356689,"user_tz":-60,"elapsed":145226,"user":{"displayName":"MD Aneesh Quonain","photoUrl":"","userId":"15373696249087923141"}}},"source":["#second layer\n","\n","model.add(Conv2D(128,(3,3)))\n","model.add(Activation('relu'))\n","model.add(MaxPool2D(pool_size=(2,2)))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OBh3skhiLjMf","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1599232356690,"user_tz":-60,"elapsed":145225,"user":{"displayName":"MD Aneesh Quonain","photoUrl":"","userId":"15373696249087923141"}}},"source":["# Flatten and Dropout Layer\n","\n","model.add(Flatten())\n","model.add(Dropout(0.5))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"XDu_PoF3L3hk","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1599232356691,"user_tz":-60,"elapsed":145224,"user":{"displayName":"MD Aneesh Quonain","photoUrl":"","userId":"15373696249087923141"}}},"source":["# softmax Classifier\n","\n","model.add(Dense(64, activation = 'relu'))\n","model.add(Dropout(0.5))\n","model.add(Dense(num_classes, activation='softmax'))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"LrwyktfDMYZ4","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1599232356691,"user_tz":-60,"elapsed":145217,"user":{"displayName":"MD Aneesh Quonain","photoUrl":"","userId":"15373696249087923141"}}},"source":["print(model.summary())"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Lb9msrO_Mbxt","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1599232356692,"user_tz":-60,"elapsed":145211,"user":{"displayName":"MD Aneesh Quonain","photoUrl":"","userId":"15373696249087923141"}}},"source":["from keras.optimizers import Adam\n","model.compile(optimizer='adam', loss='categorical_crossentropy', metrics = ['accuracy'])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tnpz4wW5NJz8","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1599232356692,"user_tz":-60,"elapsed":145205,"user":{"displayName":"MD Aneesh Quonain","photoUrl":"","userId":"15373696249087923141"}}},"source":["fitted_model = model.fit(\n","    \n","    train_X,\n","    train_y,\n","    epochs = 50,\n","    validation_split=0.25)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"wcZ7nBoJRyT3","colab_type":"text"},"source":["\n","Plot the training Loss and Accuracy\n","---\n","\n"]},{"cell_type":"markdown","metadata":{"id":"gW8u3GYyR9_A","colab_type":"text"},"source":[""]},{"cell_type":"code","metadata":{"id":"Mgaf9j0vO75w","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1599232356693,"user_tz":-60,"elapsed":145200,"user":{"displayName":"MD Aneesh Quonain","photoUrl":"","userId":"15373696249087923141"}}},"source":["from matplotlib import pyplot as plt\n","\n","#plot Training and Validation Loss\n","plt.plot(fitted_model.history['loss'], 'r', label = 'traning loss')\n","plt.plot(fitted_model.history['val_loss'], label = 'validation loss')\n","plt.xlabel('Number of epochs')\n","plt.ylabel('Loss Value')\n","plt.legend()\n","plt.show()\n","\n","#plot Training and Validation Accuracy\n","plt.plot(fitted_model.history['accuracy'], 'r', label = 'traning accuracy')\n","plt.plot(fitted_model.history['val_accuracy'], label = 'validation accuracy')\n","plt.xlabel('Number of epochs')\n","plt.ylabel('accuracy Value')\n","plt.legend()\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"rNw3JXZuTEwR","colab_type":"code","colab":{},"executionInfo":{"status":"aborted","timestamp":1599232356693,"user_tz":-60,"elapsed":145197,"user":{"displayName":"MD Aneesh Quonain","photoUrl":"","userId":"15373696249087923141"}}},"source":["#save the model\n","model.save('face_mask_detection.h5')"],"execution_count":null,"outputs":[]}]}